services:
  # Serviço do MongoDB
  mongodb:
    image: mongo:latest
    container_name: dynadok-mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: dynadok-test
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  # Serviço da API NestJS
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dynadok-api
    restart: always
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://root:example@mongodb:27017/dynadok-test?authSource=admin
      PORT: 3000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_TTL: 3600
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - mongodb
      - redis
      - kafka
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Serviço Zookeeper (necessário para o Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: dynadok-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - app-network

  # Serviço Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: dynadok-kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  # Serviço Kafka UI para visualização e gerenciamento do Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dynadok-kafka-ui
    depends_on:
      - kafka
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

volumes:
  mongodb_data:
    driver: local
  redis_data:

networks:
  app-network:
    driver: bridge
